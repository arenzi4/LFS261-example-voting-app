/* groovylint-disable DuplicateStringLiteral, NestedBlockDepth */
/* groovylint-disable-next-line CompileStatic */
pipeline {
    agent none
    stages {
        stage('build') {
            when {
                changeset '**/worker/**'
            }
            agent {
                docker {
                    image 'maven:3.9.8-sapmachine-21'
                    args '-v $HOME/.m2:/root/.m2'
                }
            }
            steps {
                echo 'building worker app'
                dir('worker') {
                    sh 'mvn compile'
                }
            /* groovylint-disable-next-line DuplicateStringLiteral */
            }
        }
        stage('test') {
            when {
                changeset '**/worker/**'
            }
            agent {
                docker {
                    image 'maven:3.9.8-sapmachine-21'
                    args '-v $HOME/.m2:/root/.m2'
                }
            }
            steps {
                echo 'running unit tests on worker app'
                dir('worker') {
                    sh 'mvn clean test'
                }
            }
        }
        stage('package') {
            when {
                changeset '**/worker/**'
            }
            agent {
                docker {
                    image 'maven:3.9.8-sapmachine-21'
                    args '-v $HOME/.m2:/root/.m2'
                }
            }
            steps {
                echo 'packaging worker app into a jar file'
                dir('worker') {
                    sh 'mvn package -DskipTests'
                    archiveArtifacts artifacts: '**/target/*.jar',
fingerprint: true
                }
            }
        }
        stage('docker-package') {
            agent any
            steps {
                echo 'Packaging worker app with docker'
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerlogin') {
                        workerImage = docker.build("agren/worker:v${env.BUILD_ID}", './worker')
                        workerImage.push()
                        workerImage.push('latest')
                    }
                }
            }
        }
    }
    post {
        always {
            echo 'the job is complete'
        }
    }
}
